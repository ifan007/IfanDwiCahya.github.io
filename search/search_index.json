{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Selamat Datang... \u00b6 NAMA : IFAN DWI CAHYA NIM : 180411100141 PRODI : TEKNIK INFORMATIKA FAKULTAS : TEKNIK UNIVERSITAS TRUNOJOYO MADURA KELAS : KOMPUTASI NUMERIK B","title":"Beranda"},{"location":"#selamat-datang","text":"NAMA : IFAN DWI CAHYA NIM : 180411100141 PRODI : TEKNIK INFORMATIKA FAKULTAS : TEKNIK UNIVERSITAS TRUNOJOYO MADURA KELAS : KOMPUTASI NUMERIK B","title":"Selamat Datang..."},{"location":"tugas1/","text":"DERET MACLAURIN \u00b6 Deret MacLaurin merupakan suatu fungsi f(x) yang memiliki turunan f'(x), f\u201d(x), f\u201d'(x), dan seterusnya yang kontinyu dalam interval I dan a, x I maka untuk x disekitar a yaitu |x \u2013 a| < , f(x) dapat diekspansi kedalam Deret Taylor. contoh Deret Maclaurin : $$ f(x) = f(0)+f'(0) \\frac{x}{1!}+f''(0) \\frac{x^2}{2!}+f'''(0) \\frac{x^3}{3!}+... $$ Soal \u00b6 tentukan e^2x dengan x = 4 dan ekspansi eror < 0,001. Penyelesaian \u00b6 Perhitungan e^2x Dalam banyak masalah terapan, pilihan basis yang mudah digunakan adalah bilangan irasional e = 2,718281828... Bilangan ini disebut basis natural . Fungsi f ( x ) = ex disebut sebagai fungsi eksponensial natural. . Pastikan bahwa dalam melihat fungsi eksponensial f ( x ) = ex , e adalah konstanta 2,718281828\u2026, sedangkan x adalah variabel. Untuk bilangan e2^x maka: cara perhitungannya adalah sebagai berikut: Jika nilai x diganti dengan 4 maka hasilnya adalah 296,99 Listing Program \u00b6 Untuk membuat program agar dapat mengekspansi bilangan e^2x dengan nilai x=4 hingga nilai menjadi kurang dari 0,001 bisa dibuat dengan listing program sebagai berikut. import math x = 4 hsl = 1 a = 0 b = 1 ulang = 1 while hsl > 0.001 : fx = 0 fy = 0 for i in range ( a ): fx += ( 2 ** i ) * x ** i / math . factorial ( i ) for j in range ( b ): fy += ( 2 ** j ) * x ** j / math . factorial ( j ) hsl = fy - fx a += 1 b += 1 print ( \"perulangan ke\" , ulang , \"= \" , hsl ) ulang += 1 Output: perulangan ke 1 = 1.0 perulangan ke 2 = 8.0 perulangan ke 3 = 32.0 perulangan ke 4 = 85.33333333333333 perulangan ke 5 = 170.66666666666669 perulangan ke 6 = 273.0666666666666 perulangan ke 7 = 364.08888888888896 perulangan ke 8 = 416.1015873015872 perulangan ke 9 = 416.1015873015872 perulangan ke 10 = 369.8680776014112 perulangan ke 11 = 295.89446208112895 perulangan ke 12 = 215.195972422639 perulangan ke 13 = 143.46398161509296 perulangan ke 14 = 88.28552714774924 perulangan ke 15 = 50.448872655856576 perulangan ke 16 = 26.90606541645684 perulangan ke 17 = 13.45303270822842 perulangan ke 18 = 6.330838921519444 perulangan ke 19 = 2.8137061873417224 perulangan ke 20 = 1.184718394670199 perulangan ke 21 = 0.47388735786807956 perulangan ke 22 = 0.18052851728316455 perulangan ke 23 = 0.06564673355751438 perulangan ke 24 = 0.022833646454728296 perulangan ke 25 = 0.0076112154847578495 perulangan ke 26 = 0.0024355889549951826 perulangan ke 27 = 0.0007494119863622473 MathJax.Hub.Config({ tex2jax:{inlineMath:[['$$','$$']]} });","title":"Tugas 1"},{"location":"tugas1/#deret-maclaurin","text":"Deret MacLaurin merupakan suatu fungsi f(x) yang memiliki turunan f'(x), f\u201d(x), f\u201d'(x), dan seterusnya yang kontinyu dalam interval I dan a, x I maka untuk x disekitar a yaitu |x \u2013 a| < , f(x) dapat diekspansi kedalam Deret Taylor. contoh Deret Maclaurin : $$ f(x) = f(0)+f'(0) \\frac{x}{1!}+f''(0) \\frac{x^2}{2!}+f'''(0) \\frac{x^3}{3!}+... $$","title":"DERET MACLAURIN"},{"location":"tugas1/#soal","text":"tentukan e^2x dengan x = 4 dan ekspansi eror < 0,001.","title":"Soal"},{"location":"tugas1/#penyelesaian","text":"Perhitungan e^2x Dalam banyak masalah terapan, pilihan basis yang mudah digunakan adalah bilangan irasional e = 2,718281828... Bilangan ini disebut basis natural . Fungsi f ( x ) = ex disebut sebagai fungsi eksponensial natural. . Pastikan bahwa dalam melihat fungsi eksponensial f ( x ) = ex , e adalah konstanta 2,718281828\u2026, sedangkan x adalah variabel. Untuk bilangan e2^x maka: cara perhitungannya adalah sebagai berikut: Jika nilai x diganti dengan 4 maka hasilnya adalah 296,99","title":"Penyelesaian"},{"location":"tugas1/#listing-program","text":"Untuk membuat program agar dapat mengekspansi bilangan e^2x dengan nilai x=4 hingga nilai menjadi kurang dari 0,001 bisa dibuat dengan listing program sebagai berikut. import math x = 4 hsl = 1 a = 0 b = 1 ulang = 1 while hsl > 0.001 : fx = 0 fy = 0 for i in range ( a ): fx += ( 2 ** i ) * x ** i / math . factorial ( i ) for j in range ( b ): fy += ( 2 ** j ) * x ** j / math . factorial ( j ) hsl = fy - fx a += 1 b += 1 print ( \"perulangan ke\" , ulang , \"= \" , hsl ) ulang += 1 Output: perulangan ke 1 = 1.0 perulangan ke 2 = 8.0 perulangan ke 3 = 32.0 perulangan ke 4 = 85.33333333333333 perulangan ke 5 = 170.66666666666669 perulangan ke 6 = 273.0666666666666 perulangan ke 7 = 364.08888888888896 perulangan ke 8 = 416.1015873015872 perulangan ke 9 = 416.1015873015872 perulangan ke 10 = 369.8680776014112 perulangan ke 11 = 295.89446208112895 perulangan ke 12 = 215.195972422639 perulangan ke 13 = 143.46398161509296 perulangan ke 14 = 88.28552714774924 perulangan ke 15 = 50.448872655856576 perulangan ke 16 = 26.90606541645684 perulangan ke 17 = 13.45303270822842 perulangan ke 18 = 6.330838921519444 perulangan ke 19 = 2.8137061873417224 perulangan ke 20 = 1.184718394670199 perulangan ke 21 = 0.47388735786807956 perulangan ke 22 = 0.18052851728316455 perulangan ke 23 = 0.06564673355751438 perulangan ke 24 = 0.022833646454728296 perulangan ke 25 = 0.0076112154847578495 perulangan ke 26 = 0.0024355889549951826 perulangan ke 27 = 0.0007494119863622473 MathJax.Hub.Config({ tex2jax:{inlineMath:[['$$','$$']]} });","title":"Listing Program"},{"location":"tugas2/","text":"Mencari Nilai Akar Dalam Persamaan Aljabar \u00b6 ada 4 metode dalam penyelesaian mencari nilai akar persamaan aljabar yaitu Metode Bisection Metode Regula- Falsi Metode Newton Raphson Metode Secant 1. Metode Bisection \u00b6 \u200b Metode biseksi ini membagi range menjadi 2 bagian, dari dua bagian ini dipilih bagian mana yang mengandung akar sedangkan bagian yang tidak mengandung akar akan dibuang. Hal ini dilakukan berulang-ulang hingga diperoleh suatu akar persamaan. Dalam perhitungan mencari Nilai Akar dengen Metode Bisection Tentukan batas bawah (a) dan batas atas (b). Kemudian dihitung nilai tengah :$ x =a+b/2$ Dari nilai c ini perlu dilakukan pengecekan keberadaan akar. Secara matematik, suatu range terdapat akar persamaan bila f(a) dan f(b) berlawanan tanda atau dituliskan : f(a).f(b)<0 f(a).f(b)<0 Setelah diketahui di bagian mana terdapat akar, maka batas bawah dan batas atas diperbarui sesuai dengan range dari bagian yang mempunyai akar. Algoritma Mencari Akar dengan Motode Bisection \u00b6 Tentukan nilai a dan b Tentukan toleransi ee dan iterasi maksimum N Hitung f(a) f(a) dan f(b) f(b) Jika f(a).f(b)>0 f(a).f(b)>0 maka proses dihentikan karena tidak ada akar, bila tidak maka dilanjutkan Hitung x=(a+b)/2 x=(a+b)/2 Hitung f(x) f(x) Bila f(x).f(a)<0 f(x).f(a)<0 maka b=x b=x dan f(b)=f(x) f(b)=f(x) , bila tidak maka a=x a=x dan f(a)=f(x) f(a)=f(x) Jika |b\u2212a|<e |b\u2212a|<e , dimana ketika iterasi maks maka proses dihentikan dan didapatkan akar x, bila tidak, ulangi langkah 6 langkah menghitung dengan menggunakan bisection \u00b6 Mendifinisikan sebuah fungsi f(x), dimana f(x) yang akan digunakan adalah : f(x)=x^2\u22125x+6 f(x)=x^2\u22125x+6 Langkah kedua menentukan Nilai a dan b, mengambil nilai batas awal (a) = 1 dan nilai batas bawahnya (b) = 2.1 Langkah ketiga menentukan toleransi tingkat error dan iterasi maksimum (N), pada langkah ini tolerasi tingkat error yang akan digunakan adalah 0,0001 dan iterasi maksimum yang digunakan adalah 40 Menghitung f(a) dan f(b) f(a)=1^2-5(1)+6= 2 f(a)=1^2-5(1)+6= 2 f(b)= 2,1^2 - 5(2,1)+6=-0.09 f(b)= 2,1^2 - 5(2,1)+6=-0.09 Mengecek dengan kondisi ketika f(a).f(b)>0 maka proses itu akan diberhentikan, bila f(a).f(b)<0 maka akan lanjut ke proses berikutnya. disini f(a).f(b)= 2 X -0.09 = -0.18 berarti f(a).f(b) < 0 Pada langkah ini menghitung x = (a+b)/2, dimana a =1 dan b = 2.1 maka x = (1+2.1)/2 = 1.55 Setelah mendapatkan nilai xx maka menghitung nilai f(x)nya dengan x=1.55 maka f(1.55)=(1.55)^2\u22125(1.55)+6=0,6525 f(1.55)=(1.55)^2\u22125(1.55)+6=0,6525 , maka didapatkan f(x)=0.6525 Melakukan pengecekan bila f(x).f(a)<0 maka b=x dan f(b)=f(x) jika sebaliknya maka a=x dan f(a)=f(x) f(x).f(a)= 1,305 < 0 maka a=x, jadi a=1,55 dan f(a)=1,55^2-5(1,55)+6= 0,6525 f(a)=1,55^2-5(1,55)+6= 0,6525 Maka Langkah berikutnya mengecek jika |b\u2212a|<e |b\u2212a|<e atau Iterasi sudah mencapai iterasi maksimum maka proses dihentikan dan mendapatkan akar yang dicari. |b-a|=|2,1-1,55|= 0.55 |b-a|=|2,1-1,55|= 0.55 dapat diketahui bahwa |b\u2212a| tidak < dari e maka terus melakukan iterasi sampai mendapatkan nilai akar yang dicari atau sudah sampai dengan iterasi maksimum Program mencari akar dengan metode bisection \u00b6 def f ( x ): return x ** 2 - 5 * x + 6 error = 0.0001 a = 1 b = 2.1 def bisection ( a , b ): iteration = True i = 0 max_iter = 50 while iteration and i < max_iter : if f ( a ) * f ( b ) < 0 : x = ( a + b ) / 2 if f ( a ) * f ( x ) < 0 : b = x print ( \"Jika f(a)*f(x) < 0 maka b = x, b = \" , x ) if f ( b ) * f ( x ) < 0 : a = x print ( \"Jika f(b)*f(x) < 0 maka a = x, b = \" , x ) if abs ( a - b ) < error : iteration = False else : i += 1 else : print ( 'tidak ditemukan akar' ) print ( 'x =' , x ) bisection ( a , b ) output : Jika f ( b ) * f ( x ) < 0 maka a = x , b = 1.55 Jika f ( b ) * f ( x ) < 0 maka a = x , b = 1.8250000000000002 Jika f ( b ) * f ( x ) < 0 maka a = x , b = 1.9625000000000001 Jika f ( a ) * f ( x ) < 0 maka b = x , b = 2.03125 Jika f ( b ) * f ( x ) < 0 maka a = x , b = 1.9968750000000002 Jika f ( a ) * f ( x ) < 0 maka b = x , b = 2.0140625 Jika f ( a ) * f ( x ) < 0 maka b = x , b = 2.0054687500000004 Jika f ( a ) * f ( x ) < 0 maka b = x , b = 2.0011718750000003 Jika f ( b ) * f ( x ) < 0 maka a = x , b = 1.9990234375000002 Jika f ( a ) * f ( x ) < 0 maka b = x , b = 2.0000976562500004 Jika f ( b ) * f ( x ) < 0 maka a = x , b = 1.9995605468750002 Jika f ( b ) * f ( x ) < 0 maka a = x , b = 1.9998291015625003 Jika f ( b ) * f ( x ) < 0 maka a = x , b = 1.9999633789062503 Jika f ( a ) * f ( x ) < 0 maka b = x , b = 2.0000305175781254 x = 2.0000305175781254 2. Metode Regula falsi \u00b6 Algoritma Mencari Akar dengan Motode Regula-Falsi \u00b6 1.Definisikan fungsi f(x) yang akan dicari akarnya 2.Masukkan interval [a,b][a,b] dimana akar berada, atau bisa dengan menententukan nilai a dan b 3.Tentukan toleransi e dan iterasi maksimum N 4.Hitung f(a) dan f(b) 5.Mengecek nilai f(a).f(b)<0f(a).f(b)<0 bila tidak maka proses nilai f(a).f(b)>0, akan memberhentikan proses perhitungan (program) 6.Mengkalkulasi x=(a|f(b)|+b|f(a)|/|f(a)|+|f(b)| x=(a|f(b)|+b|f(a)|/|f(a)|+|f(b)| 7.Jika f(a).f(x)<0 maka b = x, ketika tidak jika f(x).f(b)<0 maka a = x 8.Jika |b-a|< \u03b5, \u03b5 menjadi akurasi yang ditentukan. Lalu lanjutkan ke Langkah 9 yang lain Langkah 4 9.Cetak nilai x yang dibutuhkan akar Program mencari akar dengan regula falsi \u00b6 def f ( x ): return x ** 2 - 5 * x + 6 error = 0.0001 a = 1 b = 2.1 def regulasi_falsi ( a , b ): i = 0 max_iter = 50 iteration = True while iteration and i < max_iter : if f ( a ) * f ( b ) < 0 : x = ( a * abs ( f ( b )) + b * abs ( f ( a ))) / ( abs ( f ( a )) + abs ( f ( b ))) if f ( a ) * f ( x ) < 0 : b = x print ( \"Jika f(a) x f(x) < 0 , maka b = x , b = \" , x ) if f ( x ) * f ( b ) < 0 : a = x print ( \"Jika f(b) x f(x) < 0 , maka a = x , a = \" , x ) if abs ( a - b ) < error : iteration = False else : i += 1 else : print ( 'tidak di temukan akar' ) print ( 'x =' , x ) regulasi_falsi ( a , b ) output : Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0526315789473686 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.027027027027027 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.013698630136986 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0068965517241377 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0034602076124566 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0017331022530334 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000867302688638 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0004338394793924 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000216966804079 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000108495171965 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000542505289434 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000271260002713 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000135631840936 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000006781638037 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000033908305164 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000016954181326 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000008477097846 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000004238550715 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000002119275804 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000001059638013 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000529819038 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000264909525 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000013245477 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000066227384 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000033113694 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000001655685 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000008278422 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000000413921 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000002069602 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000001034803 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000517404 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000258704 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000000012935 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000064673 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000032334 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000000001617 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000008087 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000004046 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000000000202 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000000000101 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.00000000000005 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000000253 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000000000013 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000000067 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000000000003 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000000013 x = 2.0000000000000004 3. Metode Newton Raphton \u00b6 Algoritma Mencari Akar dengan Motode Newton Raphson \u00b6 1.Definisikan fungsi f(x) , f'(x) yang akan dicari akarnya 2.Tentukan tebakan awal akarmisal x0 dan set n = 0 3.Tentukan toleransi e dan iterasi maksimum N 4.Hitung xn+1=xn\u2212[f(xn)/f\u2032(x)n] 5.Jika |xn+1\u2212xn|<e , di mana \u03b5 adalah akurasi yang ditentukan, lalu lanjutkan ke Langkah 7, bila lanjut ke langkah 6 6.Set n = n+1 dan pergi ke langkah 4 7.Cetak nilai xn yang merupakan nilai akar yang diperlukan Program mencari akar dengan metode newton raphton \u00b6 def f ( x ): return x ** 2 - 5 * x + 6 def f_turunan ( x ): return 2 * x - 5 error = 0.0001 x0 = 0 def newton_raphson ( x0 ): iterasi = True n = 0 x_next = x0 print ( \"X0 =\" , x_next ) while iterasi : x_x = x_next x_next = x_x - ( f ( x_x ) / f_turunan ( x_x )) print ( \"x_(\" , n + 1 , \") = \" , x_next ) if abs ( x_next - x_x ) < error : iterasi = False else : n += 1 print ( \"x = \" , x_next ) newton_raphson ( x0 ) output : X0 = 0 x_ ( 1 ) = 1.2 x_ ( 2 ) = 1.7538461538461536 x_ ( 3 ) = 1.9593973037272008 x_ ( 4 ) = 1.9984752398055106 x_ ( 5 ) = 1.9999976821746035 x_ ( 6 ) = 1.9999999999946272 x = 1.9999999999946272 4. Metode Secant \u00b6 Algoritma Mencari Akar dengan Motode Secant \u00b6 Definisikan fungsi f(x) yang akan dicari akarnya Masukkan interval a, b dimana akar berada, atau bisa dengan menententukan nilai a dan b Tentukan toleransi e dan iterasi maksimum N Hitung f(a) dan f(b) Menghitung x=a\u2212[(b\u2212a)/f(b)\u2212f(a)]f(a) Jika |a\u2212b|<e, di mana \u03b5 adalah akurasi yang ditentukan, lalu lanjutkan ke Langkah 8, bila tidak lanjut ke langkah 7 Set a = b , b =x dan pergi ke langkah ke 4 Cetak nilai x yang merupakan nilai akar yang dicari. Program mencari akar dengan metode secant \u00b6 def f ( x ): return x ** 2 - 5 * x + 6 error = 0.0001 a = 1 b = 2.1 def secant ( a , b ): iterasi = True while iterasi : x = a - (( b - a ) / ( f ( b ) - f ( a ))) * f ( a ) print ( 'x = a - ((b-a) / (f(b) - f(a))) * f(a)= ' , x ) if abs ( a - b ) < error : iterasi = False else : a = b print ( \"set a = b maka a = \" , b ) b = x print ( \"set b = x maka b = \" , x ) print ( 'x =' , x ) secant ( a , b ) Output: x = a - (( b - a ) / ( f ( b ) - f ( a ))) * f ( a ) = 2.0526315789473686 set a = b maka a = 2.1 set b = x maka b = 2.0526315789473686 x = a - (( b - a ) / ( f ( b ) - f ( a ))) * f ( a ) = 1.9937888198757765 set a = b maka a = 2.0526315789473686 set b = x maka b = 1.9937888198757765 x = a - (( b - a ) / ( f ( b ) - f ( a ))) * f ( a ) = 2.000342817963662 set a = b maka a = 1.9937888198757765 set b = x maka b = 2.000342817963662 x = a - (( b - a ) / ( f ( b ) - f ( a ))) * f ( a ) = 2.0000021168814945 set a = b maka a = 2.000342817963662 set b = x maka b = 2.0000021168814945 x = a - (( b - a ) / ( f ( b ) - f ( a ))) * f ( a ) = 1.9999999992740438 set a = b maka a = 2.0000021168814945 set b = x maka b = 1.9999999992740438 x = a - (( b - a ) / ( f ( b ) - f ( a ))) * f ( a ) = 2.0000000000000013 x = 2.0000000000000013","title":"Tugas 2"},{"location":"tugas2/#mencari-nilai-akar-dalam-persamaan-aljabar","text":"ada 4 metode dalam penyelesaian mencari nilai akar persamaan aljabar yaitu Metode Bisection Metode Regula- Falsi Metode Newton Raphson Metode Secant","title":"Mencari Nilai Akar Dalam Persamaan Aljabar"},{"location":"tugas2/#1-metode-bisection","text":"\u200b Metode biseksi ini membagi range menjadi 2 bagian, dari dua bagian ini dipilih bagian mana yang mengandung akar sedangkan bagian yang tidak mengandung akar akan dibuang. Hal ini dilakukan berulang-ulang hingga diperoleh suatu akar persamaan. Dalam perhitungan mencari Nilai Akar dengen Metode Bisection Tentukan batas bawah (a) dan batas atas (b). Kemudian dihitung nilai tengah :$ x =a+b/2$ Dari nilai c ini perlu dilakukan pengecekan keberadaan akar. Secara matematik, suatu range terdapat akar persamaan bila f(a) dan f(b) berlawanan tanda atau dituliskan : f(a).f(b)<0 f(a).f(b)<0 Setelah diketahui di bagian mana terdapat akar, maka batas bawah dan batas atas diperbarui sesuai dengan range dari bagian yang mempunyai akar.","title":"1. Metode Bisection"},{"location":"tugas2/#algoritma-mencari-akar-dengan-motode-bisection","text":"Tentukan nilai a dan b Tentukan toleransi ee dan iterasi maksimum N Hitung f(a) f(a) dan f(b) f(b) Jika f(a).f(b)>0 f(a).f(b)>0 maka proses dihentikan karena tidak ada akar, bila tidak maka dilanjutkan Hitung x=(a+b)/2 x=(a+b)/2 Hitung f(x) f(x) Bila f(x).f(a)<0 f(x).f(a)<0 maka b=x b=x dan f(b)=f(x) f(b)=f(x) , bila tidak maka a=x a=x dan f(a)=f(x) f(a)=f(x) Jika |b\u2212a|<e |b\u2212a|<e , dimana ketika iterasi maks maka proses dihentikan dan didapatkan akar x, bila tidak, ulangi langkah 6","title":"Algoritma Mencari Akar dengan Motode Bisection"},{"location":"tugas2/#langkah-menghitung-dengan-menggunakan-bisection","text":"Mendifinisikan sebuah fungsi f(x), dimana f(x) yang akan digunakan adalah : f(x)=x^2\u22125x+6 f(x)=x^2\u22125x+6 Langkah kedua menentukan Nilai a dan b, mengambil nilai batas awal (a) = 1 dan nilai batas bawahnya (b) = 2.1 Langkah ketiga menentukan toleransi tingkat error dan iterasi maksimum (N), pada langkah ini tolerasi tingkat error yang akan digunakan adalah 0,0001 dan iterasi maksimum yang digunakan adalah 40 Menghitung f(a) dan f(b) f(a)=1^2-5(1)+6= 2 f(a)=1^2-5(1)+6= 2 f(b)= 2,1^2 - 5(2,1)+6=-0.09 f(b)= 2,1^2 - 5(2,1)+6=-0.09 Mengecek dengan kondisi ketika f(a).f(b)>0 maka proses itu akan diberhentikan, bila f(a).f(b)<0 maka akan lanjut ke proses berikutnya. disini f(a).f(b)= 2 X -0.09 = -0.18 berarti f(a).f(b) < 0 Pada langkah ini menghitung x = (a+b)/2, dimana a =1 dan b = 2.1 maka x = (1+2.1)/2 = 1.55 Setelah mendapatkan nilai xx maka menghitung nilai f(x)nya dengan x=1.55 maka f(1.55)=(1.55)^2\u22125(1.55)+6=0,6525 f(1.55)=(1.55)^2\u22125(1.55)+6=0,6525 , maka didapatkan f(x)=0.6525 Melakukan pengecekan bila f(x).f(a)<0 maka b=x dan f(b)=f(x) jika sebaliknya maka a=x dan f(a)=f(x) f(x).f(a)= 1,305 < 0 maka a=x, jadi a=1,55 dan f(a)=1,55^2-5(1,55)+6= 0,6525 f(a)=1,55^2-5(1,55)+6= 0,6525 Maka Langkah berikutnya mengecek jika |b\u2212a|<e |b\u2212a|<e atau Iterasi sudah mencapai iterasi maksimum maka proses dihentikan dan mendapatkan akar yang dicari. |b-a|=|2,1-1,55|= 0.55 |b-a|=|2,1-1,55|= 0.55 dapat diketahui bahwa |b\u2212a| tidak < dari e maka terus melakukan iterasi sampai mendapatkan nilai akar yang dicari atau sudah sampai dengan iterasi maksimum","title":"langkah menghitung dengan menggunakan bisection"},{"location":"tugas2/#program-mencari-akar-dengan-metode-bisection","text":"def f ( x ): return x ** 2 - 5 * x + 6 error = 0.0001 a = 1 b = 2.1 def bisection ( a , b ): iteration = True i = 0 max_iter = 50 while iteration and i < max_iter : if f ( a ) * f ( b ) < 0 : x = ( a + b ) / 2 if f ( a ) * f ( x ) < 0 : b = x print ( \"Jika f(a)*f(x) < 0 maka b = x, b = \" , x ) if f ( b ) * f ( x ) < 0 : a = x print ( \"Jika f(b)*f(x) < 0 maka a = x, b = \" , x ) if abs ( a - b ) < error : iteration = False else : i += 1 else : print ( 'tidak ditemukan akar' ) print ( 'x =' , x ) bisection ( a , b ) output : Jika f ( b ) * f ( x ) < 0 maka a = x , b = 1.55 Jika f ( b ) * f ( x ) < 0 maka a = x , b = 1.8250000000000002 Jika f ( b ) * f ( x ) < 0 maka a = x , b = 1.9625000000000001 Jika f ( a ) * f ( x ) < 0 maka b = x , b = 2.03125 Jika f ( b ) * f ( x ) < 0 maka a = x , b = 1.9968750000000002 Jika f ( a ) * f ( x ) < 0 maka b = x , b = 2.0140625 Jika f ( a ) * f ( x ) < 0 maka b = x , b = 2.0054687500000004 Jika f ( a ) * f ( x ) < 0 maka b = x , b = 2.0011718750000003 Jika f ( b ) * f ( x ) < 0 maka a = x , b = 1.9990234375000002 Jika f ( a ) * f ( x ) < 0 maka b = x , b = 2.0000976562500004 Jika f ( b ) * f ( x ) < 0 maka a = x , b = 1.9995605468750002 Jika f ( b ) * f ( x ) < 0 maka a = x , b = 1.9998291015625003 Jika f ( b ) * f ( x ) < 0 maka a = x , b = 1.9999633789062503 Jika f ( a ) * f ( x ) < 0 maka b = x , b = 2.0000305175781254 x = 2.0000305175781254","title":"Program mencari akar dengan metode bisection"},{"location":"tugas2/#2-metode-regula-falsi","text":"","title":"2. Metode Regula falsi"},{"location":"tugas2/#algoritma-mencari-akar-dengan-motode-regula-falsi","text":"1.Definisikan fungsi f(x) yang akan dicari akarnya 2.Masukkan interval [a,b][a,b] dimana akar berada, atau bisa dengan menententukan nilai a dan b 3.Tentukan toleransi e dan iterasi maksimum N 4.Hitung f(a) dan f(b) 5.Mengecek nilai f(a).f(b)<0f(a).f(b)<0 bila tidak maka proses nilai f(a).f(b)>0, akan memberhentikan proses perhitungan (program) 6.Mengkalkulasi x=(a|f(b)|+b|f(a)|/|f(a)|+|f(b)| x=(a|f(b)|+b|f(a)|/|f(a)|+|f(b)| 7.Jika f(a).f(x)<0 maka b = x, ketika tidak jika f(x).f(b)<0 maka a = x 8.Jika |b-a|< \u03b5, \u03b5 menjadi akurasi yang ditentukan. Lalu lanjutkan ke Langkah 9 yang lain Langkah 4 9.Cetak nilai x yang dibutuhkan akar","title":"Algoritma Mencari Akar dengan Motode Regula-Falsi"},{"location":"tugas2/#program-mencari-akar-dengan-regula-falsi","text":"def f ( x ): return x ** 2 - 5 * x + 6 error = 0.0001 a = 1 b = 2.1 def regulasi_falsi ( a , b ): i = 0 max_iter = 50 iteration = True while iteration and i < max_iter : if f ( a ) * f ( b ) < 0 : x = ( a * abs ( f ( b )) + b * abs ( f ( a ))) / ( abs ( f ( a )) + abs ( f ( b ))) if f ( a ) * f ( x ) < 0 : b = x print ( \"Jika f(a) x f(x) < 0 , maka b = x , b = \" , x ) if f ( x ) * f ( b ) < 0 : a = x print ( \"Jika f(b) x f(x) < 0 , maka a = x , a = \" , x ) if abs ( a - b ) < error : iteration = False else : i += 1 else : print ( 'tidak di temukan akar' ) print ( 'x =' , x ) regulasi_falsi ( a , b ) output : Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0526315789473686 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.027027027027027 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.013698630136986 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0068965517241377 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0034602076124566 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0017331022530334 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000867302688638 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0004338394793924 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000216966804079 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000108495171965 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000542505289434 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000271260002713 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000135631840936 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000006781638037 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000033908305164 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000016954181326 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000008477097846 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000004238550715 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000002119275804 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000001059638013 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000529819038 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000264909525 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000013245477 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000066227384 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000033113694 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000001655685 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000008278422 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000000413921 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000002069602 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000001034803 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000517404 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000258704 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000000012935 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000064673 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000032334 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000000001617 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000008087 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000004046 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000000000202 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000000000101 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.00000000000005 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000000253 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000000000013 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000000067 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.000000000000003 Jika f ( a ) x f ( x ) < 0 , maka b = x , b = 2.0000000000000013 x = 2.0000000000000004","title":"Program mencari akar dengan regula falsi"},{"location":"tugas2/#3-metode-newton-raphton","text":"","title":"3. Metode Newton Raphton"},{"location":"tugas2/#algoritma-mencari-akar-dengan-motode-newton-raphson","text":"1.Definisikan fungsi f(x) , f'(x) yang akan dicari akarnya 2.Tentukan tebakan awal akarmisal x0 dan set n = 0 3.Tentukan toleransi e dan iterasi maksimum N 4.Hitung xn+1=xn\u2212[f(xn)/f\u2032(x)n] 5.Jika |xn+1\u2212xn|<e , di mana \u03b5 adalah akurasi yang ditentukan, lalu lanjutkan ke Langkah 7, bila lanjut ke langkah 6 6.Set n = n+1 dan pergi ke langkah 4 7.Cetak nilai xn yang merupakan nilai akar yang diperlukan","title":"Algoritma Mencari Akar dengan Motode Newton Raphson"},{"location":"tugas2/#program-mencari-akar-dengan-metode-newton-raphton","text":"def f ( x ): return x ** 2 - 5 * x + 6 def f_turunan ( x ): return 2 * x - 5 error = 0.0001 x0 = 0 def newton_raphson ( x0 ): iterasi = True n = 0 x_next = x0 print ( \"X0 =\" , x_next ) while iterasi : x_x = x_next x_next = x_x - ( f ( x_x ) / f_turunan ( x_x )) print ( \"x_(\" , n + 1 , \") = \" , x_next ) if abs ( x_next - x_x ) < error : iterasi = False else : n += 1 print ( \"x = \" , x_next ) newton_raphson ( x0 ) output : X0 = 0 x_ ( 1 ) = 1.2 x_ ( 2 ) = 1.7538461538461536 x_ ( 3 ) = 1.9593973037272008 x_ ( 4 ) = 1.9984752398055106 x_ ( 5 ) = 1.9999976821746035 x_ ( 6 ) = 1.9999999999946272 x = 1.9999999999946272","title":"Program mencari akar dengan metode newton raphton"},{"location":"tugas2/#4-metode-secant","text":"","title":"4. Metode Secant"},{"location":"tugas2/#algoritma-mencari-akar-dengan-motode-secant","text":"Definisikan fungsi f(x) yang akan dicari akarnya Masukkan interval a, b dimana akar berada, atau bisa dengan menententukan nilai a dan b Tentukan toleransi e dan iterasi maksimum N Hitung f(a) dan f(b) Menghitung x=a\u2212[(b\u2212a)/f(b)\u2212f(a)]f(a) Jika |a\u2212b|<e, di mana \u03b5 adalah akurasi yang ditentukan, lalu lanjutkan ke Langkah 8, bila tidak lanjut ke langkah 7 Set a = b , b =x dan pergi ke langkah ke 4 Cetak nilai x yang merupakan nilai akar yang dicari.","title":"Algoritma Mencari Akar dengan Motode Secant"},{"location":"tugas2/#program-mencari-akar-dengan-metode-secant","text":"def f ( x ): return x ** 2 - 5 * x + 6 error = 0.0001 a = 1 b = 2.1 def secant ( a , b ): iterasi = True while iterasi : x = a - (( b - a ) / ( f ( b ) - f ( a ))) * f ( a ) print ( 'x = a - ((b-a) / (f(b) - f(a))) * f(a)= ' , x ) if abs ( a - b ) < error : iterasi = False else : a = b print ( \"set a = b maka a = \" , b ) b = x print ( \"set b = x maka b = \" , x ) print ( 'x =' , x ) secant ( a , b ) Output: x = a - (( b - a ) / ( f ( b ) - f ( a ))) * f ( a ) = 2.0526315789473686 set a = b maka a = 2.1 set b = x maka b = 2.0526315789473686 x = a - (( b - a ) / ( f ( b ) - f ( a ))) * f ( a ) = 1.9937888198757765 set a = b maka a = 2.0526315789473686 set b = x maka b = 1.9937888198757765 x = a - (( b - a ) / ( f ( b ) - f ( a ))) * f ( a ) = 2.000342817963662 set a = b maka a = 1.9937888198757765 set b = x maka b = 2.000342817963662 x = a - (( b - a ) / ( f ( b ) - f ( a ))) * f ( a ) = 2.0000021168814945 set a = b maka a = 2.000342817963662 set b = x maka b = 2.0000021168814945 x = a - (( b - a ) / ( f ( b ) - f ( a ))) * f ( a ) = 1.9999999992740438 set a = b maka a = 2.0000021168814945 set b = x maka b = 1.9999999992740438 x = a - (( b - a ) / ( f ( b ) - f ( a ))) * f ( a ) = 2.0000000000000013 x = 2.0000000000000013","title":"Program mencari akar dengan metode secant"}]}